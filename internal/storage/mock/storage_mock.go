// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/vkhrushchev/gopher-mart-loyality/internal/dto"
)

// MockIUserStorage is a mock of IUserStorage interface.
type MockIUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIUserStorageMockRecorder
}

// MockIUserStorageMockRecorder is the mock recorder for MockIUserStorage.
type MockIUserStorageMockRecorder struct {
	mock *MockIUserStorage
}

// NewMockIUserStorage creates a new mock instance.
func NewMockIUserStorage(ctrl *gomock.Controller) *MockIUserStorage {
	mock := &MockIUserStorage{ctrl: ctrl}
	mock.recorder = &MockIUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserStorage) EXPECT() *MockIUserStorageMockRecorder {
	return m.recorder
}

// GetUserByLoginAndPasswordHash mocks base method.
func (m *MockIUserStorage) GetUserByLoginAndPasswordHash(ctx context.Context, login, passwordHash string) (*dto.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLoginAndPasswordHash", ctx, login, passwordHash)
	ret0, _ := ret[0].(*dto.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLoginAndPasswordHash indicates an expected call of GetUserByLoginAndPasswordHash.
func (mr *MockIUserStorageMockRecorder) GetUserByLoginAndPasswordHash(ctx, login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLoginAndPasswordHash", reflect.TypeOf((*MockIUserStorage)(nil).GetUserByLoginAndPasswordHash), ctx, login, passwordHash)
}

// SaveUser mocks base method.
func (m *MockIUserStorage) SaveUser(ctx context.Context, user *dto.UserEntity) (*dto.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(*dto.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockIUserStorageMockRecorder) SaveUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockIUserStorage)(nil).SaveUser), ctx, user)
}
