// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/vkhrushchev/gopher-mart-loyality/internal/dto"
)

// MockIUserStorage is a mock of IUserStorage interface.
type MockIUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIUserStorageMockRecorder
}

// MockIUserStorageMockRecorder is the mock recorder for MockIUserStorage.
type MockIUserStorageMockRecorder struct {
	mock *MockIUserStorage
}

// NewMockIUserStorage creates a new mock instance.
func NewMockIUserStorage(ctrl *gomock.Controller) *MockIUserStorage {
	mock := &MockIUserStorage{ctrl: ctrl}
	mock.recorder = &MockIUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserStorage) EXPECT() *MockIUserStorageMockRecorder {
	return m.recorder
}

// GetUserBalanceByLogin mocks base method.
func (m *MockIUserStorage) GetUserBalanceByLogin(ctx context.Context, login string) (*dto.UserBalanceEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalanceByLogin", ctx, login)
	ret0, _ := ret[0].(*dto.UserBalanceEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalanceByLogin indicates an expected call of GetUserBalanceByLogin.
func (mr *MockIUserStorageMockRecorder) GetUserBalanceByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalanceByLogin", reflect.TypeOf((*MockIUserStorage)(nil).GetUserBalanceByLogin), ctx, login)
}

// GetUserByLoginAndPasswordHash mocks base method.
func (m *MockIUserStorage) GetUserByLoginAndPasswordHash(ctx context.Context, login, passwordHash string) (*dto.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLoginAndPasswordHash", ctx, login, passwordHash)
	ret0, _ := ret[0].(*dto.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLoginAndPasswordHash indicates an expected call of GetUserByLoginAndPasswordHash.
func (mr *MockIUserStorageMockRecorder) GetUserByLoginAndPasswordHash(ctx, login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLoginAndPasswordHash", reflect.TypeOf((*MockIUserStorage)(nil).GetUserByLoginAndPasswordHash), ctx, login, passwordHash)
}

// SaveUser mocks base method.
func (m *MockIUserStorage) SaveUser(ctx context.Context, user *dto.UserEntity) (*dto.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(*dto.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockIUserStorageMockRecorder) SaveUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockIUserStorage)(nil).SaveUser), ctx, user)
}

// MockIOrderStorage is a mock of IOrderStorage interface.
type MockIOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderStorageMockRecorder
}

// MockIOrderStorageMockRecorder is the mock recorder for MockIOrderStorage.
type MockIOrderStorageMockRecorder struct {
	mock *MockIOrderStorage
}

// NewMockIOrderStorage creates a new mock instance.
func NewMockIOrderStorage(ctrl *gomock.Controller) *MockIOrderStorage {
	mock := &MockIOrderStorage{ctrl: ctrl}
	mock.recorder = &MockIOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderStorage) EXPECT() *MockIOrderStorageMockRecorder {
	return m.recorder
}

// GetOrderByOrderNumber mocks base method.
func (m *MockIOrderStorage) GetOrderByOrderNumber(ctx context.Context, orderNumber string) (*dto.OrderEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByOrderNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*dto.OrderEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByOrderNumber indicates an expected call of GetOrderByOrderNumber.
func (mr *MockIOrderStorageMockRecorder) GetOrderByOrderNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByOrderNumber", reflect.TypeOf((*MockIOrderStorage)(nil).GetOrderByOrderNumber), ctx, orderNumber)
}

// GetOrdersByUserLogin mocks base method.
func (m *MockIOrderStorage) GetOrdersByUserLogin(ctx context.Context, userLogin string) ([]dto.OrderEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserLogin", ctx, userLogin)
	ret0, _ := ret[0].([]dto.OrderEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserLogin indicates an expected call of GetOrdersByUserLogin.
func (mr *MockIOrderStorageMockRecorder) GetOrdersByUserLogin(ctx, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserLogin", reflect.TypeOf((*MockIOrderStorage)(nil).GetOrdersByUserLogin), ctx, userLogin)
}

// SaveOrder mocks base method.
func (m *MockIOrderStorage) SaveOrder(ctx context.Context, order *dto.OrderEntity) (*dto.OrderEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(*dto.OrderEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockIOrderStorageMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockIOrderStorage)(nil).SaveOrder), ctx, order)
}

// UpdateOrderStatus mocks base method.
func (m *MockIOrderStorage) UpdateOrderStatus(ctx context.Context, orderNumber string, orderStatus dto.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderNumber, orderStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockIOrderStorageMockRecorder) UpdateOrderStatus(ctx, orderNumber, orderStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockIOrderStorage)(nil).UpdateOrderStatus), ctx, orderNumber, orderStatus)
}

// UpdateOrderStatusAndAccrual mocks base method.
func (m *MockIOrderStorage) UpdateOrderStatusAndAccrual(ctx context.Context, orderNumber string, orderStatus dto.OrderStatus, accrual float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusAndAccrual", ctx, orderNumber, orderStatus, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatusAndAccrual indicates an expected call of UpdateOrderStatusAndAccrual.
func (mr *MockIOrderStorageMockRecorder) UpdateOrderStatusAndAccrual(ctx, orderNumber, orderStatus, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusAndAccrual", reflect.TypeOf((*MockIOrderStorage)(nil).UpdateOrderStatusAndAccrual), ctx, orderNumber, orderStatus, accrual)
}

// MockIWithdrawalStorage is a mock of IWithdrawalStorage interface.
type MockIWithdrawalStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIWithdrawalStorageMockRecorder
}

// MockIWithdrawalStorageMockRecorder is the mock recorder for MockIWithdrawalStorage.
type MockIWithdrawalStorageMockRecorder struct {
	mock *MockIWithdrawalStorage
}

// NewMockIWithdrawalStorage creates a new mock instance.
func NewMockIWithdrawalStorage(ctrl *gomock.Controller) *MockIWithdrawalStorage {
	mock := &MockIWithdrawalStorage{ctrl: ctrl}
	mock.recorder = &MockIWithdrawalStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWithdrawalStorage) EXPECT() *MockIWithdrawalStorageMockRecorder {
	return m.recorder
}

// GetBalanceWithdrawalsByUserLogin mocks base method.
func (m *MockIWithdrawalStorage) GetBalanceWithdrawalsByUserLogin(ctx context.Context, userLogin string) ([]dto.BalanceWithdrawalEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceWithdrawalsByUserLogin", ctx, userLogin)
	ret0, _ := ret[0].([]dto.BalanceWithdrawalEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceWithdrawalsByUserLogin indicates an expected call of GetBalanceWithdrawalsByUserLogin.
func (mr *MockIWithdrawalStorageMockRecorder) GetBalanceWithdrawalsByUserLogin(ctx, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceWithdrawalsByUserLogin", reflect.TypeOf((*MockIWithdrawalStorage)(nil).GetBalanceWithdrawalsByUserLogin), ctx, userLogin)
}

// SaveBalanceWithdrawal mocks base method.
func (m *MockIWithdrawalStorage) SaveBalanceWithdrawal(ctx context.Context, balanceWithdraw *dto.BalanceWithdrawalEntity) (*dto.BalanceWithdrawalEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBalanceWithdrawal", ctx, balanceWithdraw)
	ret0, _ := ret[0].(*dto.BalanceWithdrawalEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBalanceWithdrawal indicates an expected call of SaveBalanceWithdrawal.
func (mr *MockIWithdrawalStorageMockRecorder) SaveBalanceWithdrawal(ctx, balanceWithdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalanceWithdrawal", reflect.TypeOf((*MockIWithdrawalStorage)(nil).SaveBalanceWithdrawal), ctx, balanceWithdraw)
}
