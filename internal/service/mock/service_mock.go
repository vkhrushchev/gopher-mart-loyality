// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/vkhrushchev/gopher-mart-loyality/internal/dto"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockIUserService) GetBalance(ctx context.Context) (dto.UserBalanceDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx)
	ret0, _ := ret[0].(dto.UserBalanceDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIUserServiceMockRecorder) GetBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIUserService)(nil).GetBalance), ctx)
}

// LoginUser mocks base method.
func (m *MockIUserService) LoginUser(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockIUserServiceMockRecorder) LoginUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockIUserService)(nil).LoginUser), ctx, username, password)
}

// RegisterUser mocks base method.
func (m *MockIUserService) RegisterUser(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIUserServiceMockRecorder) RegisterUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIUserService)(nil).RegisterUser), ctx, username, password)
}

// MockIOrderService is a mock of IOrderService interface.
type MockIOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderServiceMockRecorder
}

// MockIOrderServiceMockRecorder is the mock recorder for MockIOrderService.
type MockIOrderServiceMockRecorder struct {
	mock *MockIOrderService
}

// NewMockIOrderService creates a new mock instance.
func NewMockIOrderService(ctrl *gomock.Controller) *MockIOrderService {
	mock := &MockIOrderService{ctrl: ctrl}
	mock.recorder = &MockIOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderService) EXPECT() *MockIOrderServiceMockRecorder {
	return m.recorder
}

// GetOrders mocks base method.
func (m *MockIOrderService) GetOrders(ctx context.Context) ([]dto.OrderDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx)
	ret0, _ := ret[0].([]dto.OrderDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIOrderServiceMockRecorder) GetOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIOrderService)(nil).GetOrders), ctx)
}

// PutOrder mocks base method.
func (m *MockIOrderService) PutOrder(ctx context.Context, orderNumber string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOrder", ctx, orderNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutOrder indicates an expected call of PutOrder.
func (mr *MockIOrderServiceMockRecorder) PutOrder(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOrder", reflect.TypeOf((*MockIOrderService)(nil).PutOrder), ctx, orderNumber)
}

// MockIWithdrawalService is a mock of IWithdrawalService interface.
type MockIWithdrawalService struct {
	ctrl     *gomock.Controller
	recorder *MockIWithdrawalServiceMockRecorder
}

// MockIWithdrawalServiceMockRecorder is the mock recorder for MockIWithdrawalService.
type MockIWithdrawalServiceMockRecorder struct {
	mock *MockIWithdrawalService
}

// NewMockIWithdrawalService creates a new mock instance.
func NewMockIWithdrawalService(ctrl *gomock.Controller) *MockIWithdrawalService {
	mock := &MockIWithdrawalService{ctrl: ctrl}
	mock.recorder = &MockIWithdrawalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWithdrawalService) EXPECT() *MockIWithdrawalServiceMockRecorder {
	return m.recorder
}

// DoWithdrawal mocks base method.
func (m *MockIWithdrawalService) DoWithdrawal(ctx context.Context, orderNumber string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoWithdrawal", ctx, orderNumber, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoWithdrawal indicates an expected call of DoWithdrawal.
func (mr *MockIWithdrawalServiceMockRecorder) DoWithdrawal(ctx, orderNumber, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWithdrawal", reflect.TypeOf((*MockIWithdrawalService)(nil).DoWithdrawal), ctx, orderNumber, sum)
}

// GetUserWithdrawals mocks base method.
func (m *MockIWithdrawalService) GetUserWithdrawals(ctx context.Context) ([]dto.OrderWithdrawalDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx)
	ret0, _ := ret[0].([]dto.OrderWithdrawalDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockIWithdrawalServiceMockRecorder) GetUserWithdrawals(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockIWithdrawalService)(nil).GetUserWithdrawals), ctx)
}
